{"mappings":"AAAAA,SAASC,iBAAiB,oBAAoB,WAC5C,IAAMC,EAAOF,SAASG,cAAc,SAiCpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACT,IAAMC,EAAW,CACfT,WACAC,SAEEI,EACFF,EAAQM,GAERL,EAAOK,E,GAERR,E,IA5CPJ,EAAKD,iBAAiB,UAAU,SAAUc,GACxCA,EAAMC,iBAEN,IAAMC,EAAaf,EAAKC,cAAc,kBAChCe,EAAYhB,EAAKC,cAAc,iBAC/BgB,EAAcjB,EAAKC,cAAc,oBAUzC,SAA0BiB,EAAYC,EAAMC,GAC1C,IAAK,IAAIC,EAAI,EAAGA,GAAKD,EAAQC,IAE3BnB,EAAcmB,EADOH,GAAcG,EAAI,GAAKF,GAEvCG,MAAG,SAAAV,GACJW,QAAQC,IACN,uBAAiDC,OAAxBb,EAAST,SAAS,QAAqBsB,OAAfb,EAASR,MAAM,M,IAGnEsB,OAAM,SAAAC,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MAEjBmB,QAAOC,IAAI,sBAAqCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAd7DwB,CAJmBC,SAASd,EAAWe,MAAO,IACjCD,SAASb,EAAUc,MAAO,IACxBD,SAASZ,EAAYa,MAAO,I","sources":["src/js/03-promises.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', function () {\n  const form = document.querySelector('.form');\n\n  form.addEventListener('submit', function (event) {\n    event.preventDefault();\n\n    const delayInput = form.querySelector('[name=\"delay\"]');\n    const stepInput = form.querySelector('[name=\"step\"]');\n    const amountInput = form.querySelector('[name=\"amount\"]');\n\n    //przekształcenie wartości wprowadzonych przez użytkownika w polach formularza na liczby całkowite w systemie dziesiętnym\n    const firstDelay = parseInt(delayInput.value, 10);\n    const step = parseInt(stepInput.value, 10);\n    const amount = parseInt(amountInput.value, 10);\n\n    generatePromises(firstDelay, step, amount);\n  });\n\n  function generatePromises(firstDelay, step, amount) {\n    for (let i = 1; i <= amount; i++) {\n      const currentDelay = firstDelay + (i - 1) * step;\n      createPromise(i, currentDelay) // (numer obietnicy, obliczone opóźnienie)\n        .then(response => {\n          console.log(\n            `✅ Fulfilled promise ${response.position} in ${response.delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          //wewnątrz .catch jest dekonstrukcja obiektu response\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }\n  }\n\n  function createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n      setTimeout(() => {\n        const response = {\n          position,\n          delay,\n        };\n        if (shouldResolve) {\n          resolve(response);\n        } else {\n          reject(response);\n        }\n      }, delay);\n    });\n  }\n});\n"],"names":["document","addEventListener","form","querySelector","createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","response","event","preventDefault","delayInput","stepInput","amountInput","firstDelay","step","amount","i","then","console","log","concat","catch","param","generatePromises","parseInt","value"],"version":3,"file":"03-promises.b93db996.js.map"}